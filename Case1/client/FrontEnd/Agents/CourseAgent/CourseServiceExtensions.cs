// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Frontend.Agents
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for CourseService.
    /// </summary>
    public static partial class CourseServiceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Course> FindAllCourses(this ICourseService operations)
            {
                return Task.Factory.StartNew(s => ((ICourseService)s).FindAllCoursesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Course>> FindAllCoursesAsync(this ICourseService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindAllCoursesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courses'>
            /// </param>
            public static UploadReport AddMultipleCourses(this ICourseService operations, IList<Course> courses = default(IList<Course>))
            {
                return Task.Factory.StartNew(s => ((ICourseService)s).AddMultipleCoursesAsync(courses), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='courses'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UploadReport> AddMultipleCoursesAsync(this ICourseService operations, IList<Course> courses = default(IList<Course>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddMultipleCoursesWithHttpMessagesAsync(courses, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='week'>
            /// </param>
            /// <param name='year'>
            /// </param>
            public static IList<Course> FindCoursesInWeek(this ICourseService operations, int week, int year)
            {
                return Task.Factory.StartNew(s => ((ICourseService)s).FindCoursesInWeekAsync(week, year), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='week'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Course>> FindCoursesInWeekAsync(this ICourseService operations, int week, int year, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindCoursesInWeekWithHttpMessagesAsync(week, year, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
